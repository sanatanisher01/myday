"""
Django settings for myday project.

Generated by 'django-admin startproject' using Django 4.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-n$h4boi94bo!osr@*0g6ik!4s8n)l*5%*6o9i#xb#mf%e7+z2n')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '.onrender.com',  # Allow all Render subdomains
    'myday-event-website.onrender.com',
    'www.myday-event-website.onrender.com',
]

# CSRF settings
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'https://*.onrender.com',
    'https://myday-event-website.onrender.com',
    'https://www.myday-event-website.onrender.com',
]

# For development, make CSRF cookie settings more permissive
if DEBUG:
    CSRF_COOKIE_SECURE = False
    CSRF_COOKIE_HTTPONLY = False
    CSRF_COOKIE_SAMESITE = 'Lax'
    SESSION_COOKIE_SECURE = False
    SESSION_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = 'Lax'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'cloudinary',
    'cloudinary_storage',
    'rest_framework',
    'crispy_forms',
    'crispy_bootstrap5',

    # Local apps
    'events',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myday.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myday.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Default database configuration (SQLite for development)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Get DATABASE_URL from environment
DATABASE_URL = os.environ.get('DATABASE_URL')

# Print detailed information about DATABASE_URL for debugging
print(f"DATABASE_URL environment variable: {'SET' if DATABASE_URL else 'NOT SET'}")
if not DATABASE_URL and not DEBUG:
    print("ERROR: Production environment detected but no DATABASE_URL provided!")
    print("This will likely cause data loss. Please configure a PostgreSQL database.")
    print("You need to set the DATABASE_URL environment variable in your Render dashboard.")
    print("Go to: Dashboard > Your Web Service > Environment > Environment Variables")
    print("Add: DATABASE_URL = postgresql://mydays_n59u_user:KX35eUaw9CqUeV03GQeyXa3nqS1qfbCh@dpg-cvlf2kd6ubrc73bin8i0-a.oregon-postgres.render.com/mydays_n59u")

# Use PostgreSQL if DATABASE_URL is provided
if DATABASE_URL:
    print(f"Using PostgreSQL database from DATABASE_URL environment variable")
    # Parse database URL
    DATABASES['default'] = dj_database_url.config(
        default=DATABASE_URL,
        conn_max_age=60 * 60,  # 1 hour
        conn_health_checks=True,
        ssl_require=True
    )
else:
    print("WARNING: No DATABASE_URL found. Using SQLite database which is not suitable for production.")

# Ensure database connections persist
if not DEBUG:
    # Increase connection age for production to maintain persistent connections
    CONN_MAX_AGE = 60 * 60  # 1 hour

    # Enable connection health checks
    CONN_HEALTH_CHECKS = True

# Cache settings to improve performance
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'django_cache_table',
    }
}

# Session configuration
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 1209600  # 2 weeks in seconds
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_COOKIE_SECURE = not DEBUG

# Ensure sessions persist even when browser is closed
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Media files (user uploaded files)
MEDIA_URL = '/media/'

# Check if we're on Render (they set this env var)
ON_RENDER = os.environ.get('RENDER') == 'true'

# Use the persistent disk path on Render, otherwise use local path
if ON_RENDER:
    MEDIA_ROOT = '/opt/render/project/src/media'
else:
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Cloudinary settings
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.environ.get('CLOUDINARY_CLOUD_NAME', ''),
    'API_KEY': os.environ.get('CLOUDINARY_API_KEY', ''),
    'API_SECRET': os.environ.get('CLOUDINARY_API_SECRET', ''),
}

# Use Cloudinary for media storage in production
CLOUDINARY_URL = os.environ.get('CLOUDINARY_URL', '')

# Ensure media files persist in production
if not DEBUG:
    # Configure WhiteNoise to serve media files in production
    WHITENOISE_MIMETYPES = {
        '.jpg': 'image/jpeg',
        '.jpeg': 'image/jpeg',
        '.png': 'image/png',
        '.gif': 'image/gif',
        '.webp': 'image/webp',
        '.svg': 'image/svg+xml',
        '.pdf': 'application/pdf',
    }

    # Add media files to the static files dirs so WhiteNoise can serve them
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static'),
    ]

    # Configure WhiteNoise to serve files from the media directory
    WHITENOISE_ROOT = STATIC_ROOT
    WHITENOISE_ADD_MEDIA_TO_STATICFILES = True

# Configure storage for static and media files - using the new STORAGES setting
STORAGES = {
    "default": {
        "BACKEND": "cloudinary_storage.storage.MediaCloudinaryStorage" if not DEBUG or ON_RENDER else "django.core.files.storage.FileSystemStorage",
        "OPTIONS": {
            "location": MEDIA_ROOT,
            "base_url": MEDIA_URL,
        } if DEBUG and not ON_RENDER else {},
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage" if not DEBUG else "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# Ensure WhiteNoise middleware is in the correct position
if 'whitenoise.middleware.WhiteNoiseMiddleware' not in MIDDLEWARE:
    MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')

# WhiteNoise settings for production
if not DEBUG:
    WHITENOISE_USE_FINDERS = True
    WHITENOISE_AUTOREFRESH = False
    WHITENOISE_MANIFEST_STRICT = False
    WHITENOISE_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    WHITENOISE_ADD_MEDIA_TO_STATICFILES = True

# Database persistence settings
DATABASE_ROUTERS = []

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Crispy forms configuration
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Authentication settings
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/'

# MailerSend settings
MAILERSEND_API_KEY = os.environ.get('MAILERSEND_API_KEY', '')
MAILERSEND_LIST_ID = os.environ.get('MAILERSEND_LIST_ID', '')

# Security settings for production
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
